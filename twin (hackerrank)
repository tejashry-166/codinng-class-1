import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
public class twis {
    public static void main(Stinng[]args) {
        Scanner sc = new Scanner (System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        System.out.println(solve(n,m));
        sc.close(); 
    }
    Static int solve(int n,int m) {
        int size = m-n+1;
        List<Integer> primeDivisors = sieveprimes(size);
        boolean[] primes= new boolean[size];
        Arrays.fill(pimes,true);
        for(int primeDivisor : primeDivisor) {
            for(int i=n/primeDivisor = primeDivisor;i<=m;i+=primeDivisor)
            if(i>=n&&i>primeDivisor) {
                primes[i-n]=false;
            }
        }
    }
    int result =0;
    for(int i=0;i+2<primes.length;i++) {
        if(n+i>=2&&primes[i]&&primes[i+2]) {
            result++;
        }
    }
    return result;
}
Static List<Integer>sieveprimes(int limit) {
    boolean[]primes=new boolean[limit+1];
    Arrays.fill(primes,true);
    List<Integer>result=new ArrayList <Integer>();
    for(int i=;i<primes.length;i++) {
        if(primes[i]){
            result.add(i);
            for(long j=(long)i*i;j<primes.length;j+=i) {
                primes[(int)j]=false;
            }
        }
    }
    return result;
}
}
